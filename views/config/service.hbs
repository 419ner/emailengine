<div class="d-sm-flex align-items-center justify-content-between mb-1">
    <h1 class="h3 mb-0 text-gray-800">

        <small><i class="fas fa-cog fa-fw"></i></small>
        Service
    </h1>
</div>

<p class="mb-4">General settings for EmailEngine.</p>

<form method="post" action="/admin/config/service">
    <input type="hidden" id="crumb" name="crumb" value="{{crumb}}" />

    <div class="card mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">General settings</h6>
        </div>
        <div class="card-body">

            <div class="form-group">
                <label for="settingsServiceUrl">Service URL</label>
                <input type="url" class="form-control {{#if errors.serviceUrl}}is-invalid{{/if}}"
                    id="settingsServiceUrl" name="serviceUrl" value="{{values.serviceUrl}}" data-lpignore="true"
                    autocomplete="off" />
                {{#if errors.serviceUrl}}
                <span class="invalid-feedback">{{errors.serviceUrl}}</span>
                {{/if}}
                <small class="form-text text-muted">Base URL for EmailEngine without the path part.</small>
            </div>

            <div class="form-group">
                <label for="settingsServiceSecret">Service secret</label>

                <div class="input-group">
                    <input type="password" class="form-control {{#if errors.serviceSecret}}is-invalid{{/if}}"
                        id="settingsServiceSecret" name="serviceSecret" value="{{values.serviceSecret}}"
                        data-lpignore="true" autocomplete="off" />

                    <div class="input-group-append">
                        <button class="btn btn-outline-primary" type="button" id="showServiceSecret"><i
                                class="fas fa-eye"></i></button>
                    </div>
                </div>

                {{#if errors.serviceSecret}}
                <span class="invalid-feedback">{{errors.serviceSecret}}</span>
                {{/if}}
                <small class="form-text text-muted">HMAC secret for signing public requests</small>
            </div>

            <div class="form-group form-check">
                <input type="checkbox" class="form-check-input" id="encryption" {{#if encryption}}checked{{/if}}
                    disabled />
                <label class="form-check-label" for="encryption">Field level encryption

                    <span class="badge badge-{{#if encryption}}success{{else}}warning{{/if}}">{{#if
                        encryption}}enabled{{else}}disabled{{/if}}</span>

                </label>
                <small class="form-text text-muted">You can not change encryption settings runtime. Set
                    <code>EENGINE_SECRET</code>
                    environment variable when starting EmailEngine to enable encryption. Read more <a
                        href="https://docs.emailengine.app/enabling-secret-encryption/" target="_blank">from the
                        documentation</a>.</small>
            </div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">Queue settings</h6>
            <div class="dropdown no-arrow">
                <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown"
                    aria-haspopup="true" aria-expanded="false">
                    <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                </a>
                <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in"
                    aria-labelledby="dropdownMenuLink">
                    <div class="dropdown-header">Queue actions:</div>
                    <a class="dropdown-item" href="#" id="clean-queues-btn">
                        <i class="fas fa-trash-alt fa-sm clean-icon"></i> <span>Clear completed queue entries</span>
                    </a>
                </div>
            </div>
        </div>

        <div class="card-body">
            <div class="form-group">
                <label for="settingsQueueKeep">How many completed/failed queue entries to keep in Bull</label>
                <input type="number" min="0" class="form-control {{#if errors.queueKeep}}is-invalid{{/if}}"
                    id="settingsQueueKeep" name="queueKeep" value="{{values.queueKeep}}" data-lpignore="true"
                    autocomplete="off" />
                {{#if errors.queueKeep}}
                <span class="invalid-feedback">{{errors.queueKeep}}</span>
                {{/if}}
                <small class="form-text text-muted">By default, all queued job entries are deleted after processed, so
                    "Failed" and "Completed" lists are empty in Bull UI. Set this value if you want to keep a fixed
                    number of the latest entries in the list.</small>
            </div>

        </div>
    </div>

    <div class="mb-4">
        <button type="submit" class="btn btn-primary btn-icon-split">
            <span class="icon text-white-50">
                <i class="fas fa-cog"></i>
            </span>
            <span class="text">Update settings</span>
        </button>
    </div>

</form>

<script>
    document.addEventListener('DOMContentLoaded', () => {

        let showBt = document.getElementById('showServiceSecret');
        let serviceSecretElm = document.getElementById('settingsServiceSecret');

        let showSecret = () => {
            let current = serviceSecretElm.getAttribute('type')
            serviceSecretElm.setAttribute('type', current === 'text' ? 'password' : 'text');
            showBt.blur()
        }

        showBt.addEventListener('click', showSecret);

        const sendCleanPayload = async () => {

            const res = await fetch('/admin/config/service/clean', {
                method: 'post',
                headers: { 'content-type': 'application/json' },
                body: JSON.stringify({
                    crumb: document.getElementById('crumb').value
                })
            })
            if (!res.ok) {
                throw new Error(`HTTP error! status: ${res.status}`);
            }
            const data = await res.json();

            return data;
        }

        let sendingCleanRequest = false;
        document.getElementById('clean-queues-btn').addEventListener('click', e => {
            e.preventDefault();
            if (sendingCleanRequest) {
                e.stopPropagation();
                return
            }
            sendingCleanRequest = true;
            let cleanIconElm = document.querySelector('#clean-queues-btn .clean-icon');
            cleanIconElm.classList.remove('fa-trash-alt');
            cleanIconElm.classList.add('fa-spinner', 'fa-spin');

            sendCleanPayload().then(data => {
                sendingCleanRequest = false;
                cleanIconElm.classList.add('fa-trash-alt');
                cleanIconElm.classList.remove('fa-spinner', 'fa-spin');

                showToast(data.error ? data.error : (data.success ? 'Cleanup request sent' : 'Failed to send payload'), data.success ? 'check-circle' : 'alert-triangle');
            }).catch(err => {
                sendingCleanRequest = false;
                cleanIconElm.classList.add('fa-trash-alt');
                cleanIconElm.classList.remove('fa-spinner', 'fa-spin');

                showToast('Request failed\n' + err.message, 'alert-triangle');
            })
        });
    })
</script>