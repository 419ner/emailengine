<div class="d-sm-flex align-items-center justify-content-between mb-1">
    <h1 class="h3 mb-0 text-gray-800">Logging</h1>
</div>

<p class="mb-4">
    You can store all IMAP and SMTP traffic except user credentials and message content for selected accounts. You can
    then download these logs for inspection. Account logging is not enabled by default.
</p>

<form method="post" action="/config/logging">
    <input type="hidden" id="crumb" name="crumb" value="{{crumb}}" />

    <div class="card mb-4">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">
                General settings</h6>
            <div class="dropdown no-arrow">
                <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown"
                    aria-haspopup="true" aria-expanded="false">
                    <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                </a>
                <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in"
                    aria-labelledby="dropdownMenuLink">
                    <div class="dropdown-header">Account actions:</div>
                    <a class="dropdown-item log-list" href="#" id="request-reconnect">
                        <i class="fas fa-sync fa-sm"></i>
                        <span>Trigger reconnect for listed
                            accounts</span>
                    </a>

                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="form-group form-check">
                <input type="checkbox" class="form-check-input or-else-all {{#if errors.all}}is-invalid{{/if}}"
                    data-target="log-list" id="settingsLogsAll" name="all" {{#if values.all}}checked{{/if}} />
                <label class="form-check-label" for="settingsLogsAll">Store logs for all accounts</label>
                {{#if errors.all}}
                <span class="invalid-feedback">{{errors.all}}</span>
                {{/if}}
                <small class="form-text text-muted">Not recommended if EmailEngine tracks large number of
                    accounts</small>
            </div>

            <div class="form-group">

                <label for="settingsLogsAccounts">Store IMAP logs for the following accounts</label>

                <textarea class="form-control log-list {{#if errors.accounts}}is-invalid{{/if}}"
                    id="settingsLogsAccounts" name="accounts" rows="3">{{values.accounts}}</textarea>
                {{#if errors.accounts}}
                <span class="invalid-feedback">{{errors.accounts}}</span>
                {{/if}}
                <small class="form-text text-muted">Enter one account ID per line</small>
            </div>

            <div class="form-group">
                <label for="settingsLogsMaxLogLines">Maximum lines of logs to store per account</label>
                <input type="number" class="form-control {{#if errors.maxLogLines}}is-invalid{{/if}}"
                    id="settingsLogsMaxLogLines" min="0" max="10000000" name="maxLogLines"
                    value="{{values.maxLogLines}}" />
                {{#if errors.maxLogLines}}
                <span class="invalid-feedback">{{errors.maxLogLines}}</span>
                {{/if}}
                <small class="form-text text-muted">Logs are stored in Redis which in other words means RAM, so it might
                    not be a good idea to store too much data in it</small>
            </div>
        </div>
    </div>

    <div class="mb-4">
        <button type="submit" class="btn btn-primary btn-icon-split">
            <span class="icon text-white-50">
                <i class="fas fa-cog"></i>
            </span>
            <span class="text">Update settings</span>
        </button>
    </div>

</form>


<script>
    document.addEventListener('DOMContentLoaded', () => {

        const reloadAccounts = async () => {
            const accounts = document.getElementById('settingsLogsAccounts').value.trim().split(/\r?\n/).map(line => line.trim()).filter(line => line);

            const res = await fetch('/config/logging/reconnect', {
                method: 'post',
                headers: { 'content-type': 'application/json' },
                body: JSON.stringify({
                    crumb: document.getElementById('crumb').value,
                    accounts
                })
            })
            if (!res.ok) {
                throw new Error(`HTTP error! status: ${res.status}`);
            }
            const data = await res.json();

            return data;
        }

        const requestReconnectElm = document.getElementById('request-reconnect');
        requestReconnectElm.addEventListener('click', e => {
            e.preventDefault();
            if (requestReconnectElm.classList.contains('disabled')) {
                return;
            }

            reloadAccounts().then(data => {
                showToast(data.error ? data.error : (data.success ? 'Account reconnections requested' : 'Failed to request reconnect'), data.success ? 'check-circle' : 'alert-triangle');
            }).catch(err => {
                showToast('Request failed\n' + err.message, 'alert-triangle');
            })
        });
    })
</script>