{{> webhooks_header}}

<nav aria-label="breadcrumb" class="mt-4 mb-4">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/admin/webhooks">Webhook Routing</a></li>

        <li class="breadcrumb-item active" aria-current="page">New</li>
    </ol>
</nav>

<form method="post" action="/admin/webhooks/new" id="edit-form">
    <input type="hidden" name="crumb" id="crumb" value="{{crumb}}" />

    {{>webhooks_form}}

    <div class="mb-4">
        <button type="submit" class="btn btn-primary btn-icon-split">
            <span class="icon text-white-50">
                <i class="fas fa-plus"></i>
            </span>
            <span class="text">Create routing</span>
        </button>
    </div>
</form>


<script src="/static/js/ace/ace.js"></script>
<script src="/static/js/ace/ext-language_tools.js"></script>

<input type="hidden" id="notificationTypesJson" value="{{notificationTypesJson}}">
<input type="hidden" id="examplePayloadsJson" value="{{examplePayloadsJson}}">

<div class="modal fade" id="setPayloadModal" tabindex="-1" aria-labelledby="setPayloadModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="setPayloadModalLabel">Set test payload</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <div>JSON payload</div>
                <div id="editor-json" class="code-editor" style="height: 10rem;"></div>
                <small id="inputToHelp" class="form-text text-muted">Enter the JSON strcture that will be
                    used as the <code>payload</code> value for test evaluation.</small>

            </div>
            <div class="modal-footer" style="justify-content: space-between">
                <div>
                    <select class="custom-select custom-select-sm" id="select-predefined-payload">
                        <option> -- Select predefined payload -- </option>
                    </select>
                </div>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>

    const editorFn = ace.edit("editor-fn", {
        enableBasicAutocompletion: true,
        enableSnippets: true,
        enableLiveAutocompletion: true
    });

    const editorMap = ace.edit("editor-map", {
        enableBasicAutocompletion: true,
        enableSnippets: true,
        enableLiveAutocompletion: true
    });

    // data stub:
    const notificationTypes = JSON.parse(document.getElementById('notificationTypesJson').value.trim())
    const notificationTypesCompleter = {
        getCompletions: function (editor, session, pos, prefix, callback) {
            callback(null, notificationTypes.map((notificationType) => {
                return {
                    caption: notificationType.description,
                    value: `"${notificationType.name}"`,
                    meta: "Event"
                };
            }));
        }
    };

    const langTools = ace.require('ace/ext/language_tools');
    langTools.addCompleter(notificationTypesCompleter);

    editorFn.setTheme("ace/theme/xcode");
    editorFn.session.setMode("ace/mode/javascript");
    editorFn.setValue(JSON.parse(document.getElementById('fn-content-element').value));

    editorFn.session.on('changeMode', function (e, session) {
        if ("ace/mode/javascript" === session.getMode().$id) {
            if (!!session.$worker) {
                session.$worker.send("setOptions", [{
                    esversion: 11
                }]);
            }
        }
    });

    editorMap.setTheme("ace/theme/xcode");
    editorMap.session.setMode("ace/mode/javascript");
    editorMap.setValue(JSON.parse(document.getElementById('map-content-element').value));

    editorMap.session.on('changeMode', function (e, session) {
        if ("ace/mode/javascript" === session.getMode().$id) {
            if (!!session.$worker) {
                session.$worker.send("setOptions", [{
                    esversion: 11
                }]);
            }
        }
    });

    const testPayload = { content: { data: {} }, error: null };
    const updateFilterResult = (err, result) => {
        let resultElm = document.getElementById('filter-res');
        if (err) {
            resultElm.classList.remove('text-info', 'text-success');
            resultElm.classList.add('text-danger');
            resultElm.textContent = `validation failed (${err.message})`
            return;
        }

        if (result) {
            resultElm.classList.remove('text-info', 'text-danger');
            resultElm.classList.add('text-success');
            resultElm.textContent = `filter matches`
        } else {
            resultElm.classList.remove('text-success', 'text-danger');
            resultElm.classList.add('text-info');
            resultElm.textContent = `no match`
        }
    }

    const updateMapResult = (err, result) => {

    }

    const updateExampleResult = () => {
        const filterVal = editorFn.getValue();
        const mapVal = editorMap.getValue();

        let filtered;
        let mapping;

        try {
            if (testPayload.error) {
                throw testPayload.error;
            }

            let fn = new Function('payload', filterVal);
            filtered = fn(testPayload.content)
            updateFilterResult(null, filtered === true);
        } catch (err) {
            updateFilterResult(err);
        }

        if (filtered) {
            try {
                let fn = new Function('payload', mapVal);
                mapping = fn({ data: {} })
                updateMapResult(null, mapping);
            } catch (err) {
                updateMapResult(err);
            }
        } else {
            updateMapResult(false);
        }

    }

    let validateTimer = false;
    editorFn.session.on('change', function () {
        clearTimeout(validateTimer);
        validateTimer = setTimeout(updateExampleResult, 100);
    });

    editorMap.session.on('change', function () {
        clearTimeout(validateTimer);
        validateTimer = setTimeout(updateExampleResult, 100)
    });

    editorFn.clearSelection(1);
    editorMap.clearSelection(1);

    document.addEventListener('DOMContentLoaded', () => {
        document.getElementById('edit-form').addEventListener('submit', () => {
            document.getElementById('fn-content-element').value = JSON.stringify(editorFn.getValue());
            document.getElementById('map-content-element').value = JSON.stringify(editorMap.getValue());
        });
    });

    const editorJson = ace.edit("editor-json");
    editorJson.setTheme("ace/theme/xcode");
    editorJson.session.setMode("ace/mode/json");
    editorJson.session.setValue('{\n    "data": { }\n}');

    editorJson.session.on('change', function (delta) {
        // delta.start, delta.end, delta.lines, delta.action
        let curval = editorJson.getValue().trim();
        try {
            if (curval) {
                let parsed = JSON.parse(curval);
                if (parsed && typeof parsed !== 'object') {
                    throw new Error('Not an object')
                }
                testPayload.content = parsed;
            }
            testPayload.error = null;
            clearTimeout(validateTimer);
            validateTimer = setTimeout(updateExampleResult, 10);
        } catch (err) {
            console.error(err);
            testPayload.error = err;
            clearTimeout(validateTimer);
            validateTimer = setTimeout(updateExampleResult, 10);
        }
    });

    const testPayloadBtn = document.getElementById('test-payload-btn');
    testPayloadBtn.addEventListener('click', e => {
        e.preventDefault();
        $('#setPayloadModal').modal('show');
    });

    let examplePayloads = JSON.parse(document.getElementById('examplePayloadsJson').value);
    const payloadSelectElm = document.getElementById('select-predefined-payload');

    try {
        if (examplePayloads && Array.isArray(examplePayloads)) {

            examplePayloads.forEach(example => {
                let optionElm = document.createElement('option');
                optionElm.textContent = example.name;
                optionElm.dataset.exampleKey = example.key
                payloadSelectElm.appendChild(optionElm)
            });
        }
    } catch (err) {
        console.error(err)
    }

    payloadSelectElm.addEventListener('change', e => {
        if (!payloadSelectElm.selectedIndex) {
            return
        }
        let key = payloadSelectElm.options[payloadSelectElm.selectedIndex].dataset.exampleKey;
        if (key) {
            let example = examplePayloads.find(data => data.key === key);
            if (example) {
                editorJson.session.setValue(JSON.stringify(example.content, false, 4))
            }
        }
        payloadSelectElm.selectedIndex = 0;
    });

</script>